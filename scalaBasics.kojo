/*Переменная - область памяти имеющая название, хранящая значение определенного типа.
Объявление переменной:
var имя: Тип = выражение_типа_Тип
или
var имя = выражение_типа_Тип
в этом случае scala самы выведет тип, основываясь на составных частях выражения
Примеры: */
var x1: Int = 2
var x2 = 3  //тип Int 
var s1: String = "abc"
var x3 = x1 + x2 //тип Int


/*выражение - блок кода, который может быть вычислен, значение имеет Тип
При исполнении программы - вычисление выражения происходит в момент
исполнения строчки кода где оно записано, порядок исполнения операций операций +,*.., и расстановка скобок, работают как в математике.

Например. Выражения типа Int бывают такими
-числа 1, 2, -3, 433,..
-вызовы функций, возвращающих Int,  readInt(""), random(2, 3)
-переменые типа Int, определенные выше. В нашей программе это  x1, x2, x3
-комбинация выше перечисленного используя арифметические операции +,-,/,*,% 
-блок кода, окруженный {}, содержащий вычисление числа
   {var aaa = 3
    var zzz = 4
    aaa + zzz
   } // это выражение типа Int, равное 7
-результат if(см. ниже)

примеры выражений типа Int:
1 + 2
3223 + x1
2 + (random(2, 3) * x3)
if(x > 3) 2 else 6


Для выражений других типов, ситуация аналогичная, выражениями являются. 
-Как и у Int, вызовы функций/переменные/блоки кода/результат if
-Другие спецефичные для типа выражения

Например спецефичными для Boolean будут:
-Сравнения x == y, x != y, x > y, x >= y, x < y, x <= y
-Комбинация двух логических выражений в одно используя логические операции
x && y, x || y, x ^ y, !x
примеры выражений типа Boolean:
true 
x1 == 2
x1 == 2 || x2 <= 3
*/

/* if - логический оператор, позволяет вычислить одно или другое выражение, в зависимости от некоторого условия(чего-то что может быть верно или не верно) - выражение логического типа
синтаксис:
if ( ВЫРАЖЕНИЕ_ТИПА_BOOLEAN ) ВЫРАЖЕНИЕ_А
или
if ( ВЫРАЖЕНИЕ_ТИПА_BOOLEAN ) ВЫРАЖЕНИЕ_А
else ВЫРАЖЕНИЕ_В

Выражение_А будет вычислено если ВЫРАЖЕНИЕ_ТИПА_BOOLEAN при вычислении вернет true, ВЫРАЖЕНИЕ_В в противном случае

Т.к. существуют выражение вида - блок кода, то можно использовать {} и написать:
if(условие ) {
    //что делаем если условие верно
} else {
    //что делаем еси услове не верно
}
или: 
if(условие_1 ) {
    //что делаем если условие_1 верно
} else if(условие_2){
    //что делаем если условие_2 верно
} else {
    //что делем если условие_1 и условие_2 не верны 
}   

Обратите внимание что возможность так написать следует из 
определенныех выше правил.

Пример:
*/
var num = 6
if(num > 0) {
    println(">0")
} else if(num == 0){
    println("==0")
} else {
    println("<0")
}
//или(т.к. в каждом выражении в if выполняется ровно по одному вызову функии
if(num > 0) println(">0")
else if(num == 0) println("==0")
else println("<0")
/*
if как выражение
если if имеет вид
if(условие)ВЫРАЖЕНИЕ_ТИПА_А
else ВЫРАЖЕНИЕ_ТИПА_A
то он сам является выражением типа А и можно написать
var x: A = if(условие) ВЫРАЖЕНИЕ_ТИПА_А else ВЫРАЖЕНИЕ_ТИПА_А
например:
*/
var aa: Int = if(num > 0) 5 else 6
var oddOrEven: String = if(num % 2 == 0) "ЧЕТНОЕ" else "НЕЧЕТНОЕ")
println(if(num != 0) "НЕ НОЛЬ" else "НОЛЬ")

/*
Списки - способ хранить наборы данных одного типа в одной переменной.
Итуитивно списки похожи на обычный список покупок записанный на бумаге.
Теория про списки тут
https://github.com/azu0nyan/kojoEx/blob/master/seq.kojo
*/

/*
Цикл с параметром for, для работы со списками бывает необходимо перебрать все его элементы
синтаксис:
for(название_В <- список) выражение_А

название_В - параметр цикла
выражение_А - тело цикла, в этом выражении может быть использовано значение "название_В"

for(e <- s) X  
читается как для каждого элемент e из списка s сделать X
примеры - смотри теорию про списки 
https://github.com/azu0nyan/kojoEx/blob/master/seq.kojo
*/

/*функции
теория тут 
https://github.com/azu0nyan/kojoEx/blob/master/functions.kojo
*/

/*
Задания:
1)Спросите слово Х
Выведите "это сено" если Х равно "сено" или Х равно "СЕНО",
выведите "это не сено" в противном случае
2)Спросите число Х, посчитайте сумму цифр числа 
(используйте while, целочисленное деление(/) и деление с остатком(%))
3)Спросите число Х, 
-создайте список S из Х, 2 * Х, Х + 1, Х / 2
-добавьте в начало списка S число 1
-добавьте в конец списка S число 2
4)Для списка S из прошлого пункта 
-выведите его по одному элементу на строке
-Модифицируйте код, для тоо чтобы выводилась таблица "номер - элемент"
например Seq(2, 3, 4) вывод:
0 - 2
1 - 3
2 - 4
5)Создайте функцию которая принимает два числа a, b, возвращает 
true, если a == b, или a == 2 * b, false в противном случае 
6)Создайте функцию которая принимает число a, строку s,
Возвращает "длиннее" если s длиннее чем a, "равно" если длинна 
s равна a, "короче" если длинна s меньше чем а


*/